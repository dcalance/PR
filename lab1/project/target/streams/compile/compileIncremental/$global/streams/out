[debug] 
[debug] Initial source changes: 
[debug] 	removed:Set(C:\Users\User\IdeaProjects\PR\lab1\project\Hi.scala)
[debug] 	added: Set()
[debug] 	modified: Set()
[debug] Invalidated products: Set(C:\Users\User\IdeaProjects\PR\lab1\project\target\scala-2.12\sbt-1.0\classes\Hi$.class, C:\Users\User\IdeaProjects\PR\lab1\project\target\scala-2.12\sbt-1.0\classes\Hi.class)
[debug] External API changes: API Changes: Set()
[debug] Modified binary dependencies: Set()
[debug] Initial directly invalidated classes: Set(Hi)
[debug] 
[debug] Sources indirectly invalidated by:
[debug] 	product: Set(C:\Users\User\IdeaP[debug] Invalidating (transitively) by inheritance from Hi...
[debug] Initial set of included nodes: Set(Hi)
[debug] Invalidated by transitive inheritance dependency: Set(Hi)
[debug] Change NamesChange(Hi,ModifiedNames(changes = UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName(hashCode,[Default]),[debug] Invalidating (transitively) by inheritance from Hi...
[debug] Initial set of included nodes: Set(Hi)
[debug] Invalidated by transitive inheritance dependency: Set(Hi)
[debug] Change NamesChange(Hi,ModifiedNames(changes = UsedName(getClass,[Default]), UsedName(main,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(##,[Default]), UsedName(synchronized,[Default]), UsedName(ne,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(Hi,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(isInstanceOf,[Default]))) invalidates 1 classes due to The Hi has the following regular definitions changed:
[debug] 	UsedName(getClass,[Default]), UsedName(main,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(##,[Default]), UsedName(synchronized,[Default]), UsedName(ne,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(Hi,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(notifyAll,[Default]), UsedName(isInstanceOf,[Default]).
[debug] 	> by transitive inheritance: Set(Hi)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] New invalidations:
[debug] 	Set()
[debug] Initial set of included nodes: Set()
[debug] Previously invalidated, but (transitively) depend on new invalidations:
[debug] 	Set()
[debug] All newly invalidated classes after taking into account (previously) recompiled classes:Set()
